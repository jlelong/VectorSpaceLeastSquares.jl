var documenterSearchIndex = {"docs":
[{"location":"leastsquares/#Least-squares-problem","page":"Least Squares problem","title":"Least squares problem","text":"","category":"section"},{"location":"leastsquares/","page":"Least Squares problem","title":"Least Squares problem","text":"Solving a least squares problem of the form","category":"page"},{"location":"leastsquares/","page":"Least Squares problem","title":"Least Squares problem","text":"inf_alpha in mathbbR^d sum_m=1^M left(sum_i=1^d alpha_i g_icircvarphi(x_m) - y_mright)^2","category":"page"},{"location":"leastsquares/","page":"Least Squares problem","title":"Least Squares problem","text":"is done by creating an instance of VSLeastSquares","category":"page"},{"location":"leastsquares/#VectorSpaceLeastSquares.VSLeastSquares","page":"Least Squares problem","title":"VectorSpaceLeastSquares.VSLeastSquares","text":"VSLeastSquares{Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nThe main object to solve a least squares problem.\n\n\n\n\n\n","category":"type"},{"location":"leastsquares/#VectorSpaceLeastSquares.VSLeastSquares-Union{Tuple{Tt}, Tuple{Tb}, Tuple{Tb, Tt}, Tuple{Tb, Tt, Type}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.VSLeastSquares","text":"VSLeastSquares(basis::Tb, transform::Tt=VoidTransformation(), Td::Type=Float64) where {Tb<:AbstractBasis, Tt<:AbstractTransformation}\n\nCreate a VSLeastSquares object from basis and transform and capable of handling Td typed data.\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#Base.length-Union{Tuple{VSLeastSquares{Tb, Tt, Td}}, Tuple{Td}, Tuple{Tt}, Tuple{Tb}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"Base.length","text":"length(vslsq::VSLeastSquares{Tb, Tt, Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nReturn the number of functions of the basis used to solve the least squares problem\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#VectorSpaceLeastSquares.nVariates-Union{Tuple{VSLeastSquares{Tb, Tt, Td}}, Tuple{Td}, Tuple{Tt}, Tuple{Tb}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.nVariates","text":"nVariates(vslsq::VSLeastSquares{Tb, Tt, Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nReturn the number of variates in the least squares problem\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#Base.size-Union{Tuple{VSLeastSquares{Tb, Tt, Td}}, Tuple{Td}, Tuple{Tt}, Tuple{Tb}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"Base.size","text":"size(vslsq::VSLeastSquares{Tb, Tt, Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nReturn the tuple (nVariates, length)\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#VectorSpaceLeastSquares.getCoefficients-Union{Tuple{VSLeastSquares{Tb, Tt, Td}}, Tuple{Td}, Tuple{Tt}, Tuple{Tb}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.getCoefficients","text":"getCoefficients(vslsq::VSLeastSquares{Tb, Tt, Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nReturn the coefficients solution to the least squares problem. \n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#VectorSpaceLeastSquares.getBasis-Union{Tuple{VSLeastSquares{Tb, Tt, Td}}, Tuple{Td}, Tuple{Tt}, Tuple{Tb}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.getBasis","text":"getBasis(vslsq::VSLeastSquares{Tb, Tt, Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nReturn the basis used to solve the least squares problem.\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/","page":"Least Squares problem","title":"Least Squares problem","text":"An instance of VSLeastSquares is typically manipulated using the following methods to solve the least squares problem and compute a prediction","category":"page"},{"location":"leastsquares/#VectorSpaceLeastSquares.fit-Union{Tuple{Td}, Tuple{Tt}, Tuple{Tb}, Tuple{VSLeastSquares{Tb, Tt, Td}, AbstractVector{<:AbstractVector{Td}}, AbstractVector{Td}}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.fit","text":"fit(vslsq::VSLeastSquares{Tb, Tt, Td}, x::AbstractVector{<:AbstractVector{Td}}, y::AbstractVector{Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nSolve the least squares problem.\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#VectorSpaceLeastSquares.predict-Union{Tuple{Td}, Tuple{Tt}, Tuple{Tb}, Tuple{VSLeastSquares{Tb, Tt, Td}, AbstractVector{Td}}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.predict","text":"predict(vslsq::VSLeastSquares{Tb, Tt, Td}, x::AbstractVector{Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nCompute the value predicted by the least squares problem.\n\nThe method fit must have been called before.\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/","page":"Least Squares problem","title":"Least Squares problem","text":"If the underlying basis of type Tb is differentiable the derivative of the prediction can be computed using","category":"page"},{"location":"leastsquares/#VectorSpaceLeastSquares.derivative-Union{Tuple{Td}, Tuple{Tt}, Tuple{Tb}, Tuple{VSLeastSquares{Tb, Tt, Td}, AbstractVector{Td}, Integer}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.derivative","text":"derivative(vslsq::VSLeastSquares{Tb, Tt, Td}, x::AbstractVector{Td}, index::Integer) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nCompute the partial derivative of the prediction w.r.t to the index variable.\n\nThe method fit must have been called before.\n\n\n\n\n\n","category":"method"},{"location":"leastsquares/#VectorSpaceLeastSquares.gradient-Union{Tuple{Td}, Tuple{Tt}, Tuple{Tb}, Tuple{VSLeastSquares{Tb, Tt, Td}, AbstractVector{Td}}} where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}","page":"Least Squares problem","title":"VectorSpaceLeastSquares.gradient","text":"gradient(vslsq::VSLeastSquares{Tb, Tt, Td}, x::AbstractVector{Td}) where {Tb<:AbstractBasis, Tt<:AbstractTransformation, Td<:Real}\n\nCompute the gradient of the prediction at x.\n\nThe method fit must have been called before.\n\n\n\n\n\n","category":"method"},{"location":"basis/#Vector-Space-bases","page":"Vector space basis","title":"Vector Space bases","text":"","category":"section"},{"location":"basis/","page":"Vector space basis","title":"Vector space basis","text":"The vector space mathcalV is represented by the abstract type AbstractBasis.","category":"page"},{"location":"basis/#VectorSpaceLeastSquares.AbstractBasis","page":"Vector space basis","title":"VectorSpaceLeastSquares.AbstractBasis","text":"AbstractBasis\n\nSuper type for all bases. A basis must implement the following methods: nVariates, length, getType, value. If the basis contains only differentiable functions, it must also implement derivative. If the method derivative is not defined for a concrete subtype of AbstractBasis, it means that the basis functions are NOT differentiable.\n\n\n\n\n\n","category":"type"},{"location":"basis/#VectorSpaceLeastSquares.nVariates-Tuple{AbstractBasis}","page":"Vector space basis","title":"VectorSpaceLeastSquares.nVariates","text":"nVariates(B::AbstractBasis)\n\nReturn the number of variates of the functions inside the basis.\n\n\n\n\n\n","category":"method"},{"location":"basis/#Base.length-Tuple{AbstractBasis}","page":"Vector space basis","title":"Base.length","text":"length(B::AbstractBasis)\n\nReturn the number of elements in the basis.\n\n\n\n\n\n","category":"method"},{"location":"basis/#Base.size-Tuple{AbstractBasis}","page":"Vector space basis","title":"Base.size","text":"size(B::AbstractBasis)\n\nReturn the tuple (nVariates, length).\n\n\n\n\n\n","category":"method"},{"location":"basis/#VectorSpaceLeastSquares.getType-Tuple{AbstractBasis}","page":"Vector space basis","title":"VectorSpaceLeastSquares.getType","text":"getType(B::AbstractBasis)\n\nReturn the internal basis type.\n\n\n\n\n\n","category":"method"},{"location":"basis/#VectorSpaceLeastSquares.value-Tuple{AbstractBasis, AbstractVector{<:Real}, Integer}","page":"Vector space basis","title":"VectorSpaceLeastSquares.value","text":"value(B::AbstractBasis, x::AbstractVector{<:Real}, index::Integer)\n\nCompute the value of the index-th basis function at point x.\n\n\n\n\n\n","category":"method"},{"location":"basis/#VectorSpaceLeastSquares.derivative-Tuple{AbstractBasis, AbstractVector{<:Real}, Integer, Integer}","page":"Vector space basis","title":"VectorSpaceLeastSquares.derivative","text":"derivative(B::AbstractBasis, x::AbstractVector{<:Real}, index::Integer, derivativeIndex::Integer)\n\nCompute the value of the first derivative of the index-th basis function w.r.t to the derivativeIndex variate at point x.\n\n\n\n\n\n","category":"method"},{"location":"basis/#Polynomial-Bases","page":"Vector space basis","title":"Polynomial Bases","text":"","category":"section"},{"location":"basis/","page":"Vector space basis","title":"Vector space basis","text":"Polynomial Bases are implemented using the PolynomialBasis type","category":"page"},{"location":"basis/#VectorSpaceLeastSquares.PolynomialBasis","page":"Vector space basis","title":"VectorSpaceLeastSquares.PolynomialBasis","text":"PolynomialBasis <: AbstractBasis\n\nRepresent a multivariate polynomial\n\ndegree::Int64: maximum total degree\nnVariates::Int6: number of variates\ndim::Int6: dimension of the generated vector space\ntype::PolynomialType: a value from PolynomialType\ntensor::SparseMatrixCSC{Int64, Int64}: the sparse tensor representation of the polynomial. Polynomials are stored by column.\n\n\n\n\n\n","category":"type"},{"location":"basis/","page":"Vector space basis","title":"Vector space basis","text":"The following families of polynomials are available","category":"page"},{"location":"basis/#VectorSpaceLeastSquares.PolynomialType","page":"Vector space basis","title":"VectorSpaceLeastSquares.PolynomialType","text":"PolynomialType\n\nList the families of polynomials available through the PolynomialBasis type\n\nCanonic\nHermite\nTchebychev\n\n\n\n\n\n","category":"type"},{"location":"basis/","page":"Vector space basis","title":"Vector space basis","text":"A PolynomialBasis object can be created using","category":"page"},{"location":"basis/#VectorSpaceLeastSquares.PolynomialBasis-Tuple{Integer, Integer, PolynomialType}","page":"Vector space basis","title":"VectorSpaceLeastSquares.PolynomialBasis","text":"PolynomialBasis(degree::Integer, nVariates::Integer, type::PolynomialType)\n\nCreate a polynomial basis with type, nVariates variables and total maximum degree\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Polynomial-regression-with-non-prior-transformation","page":"Examples","title":"Polynomial regression with non prior transformation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"dim = 4\ndeg = 3\nnSamples = 50000\nT = Float32\nf(x) = 2 * x[2]^3 - x[1] * x[4] + 7 * x[3]^2 * x[1]\ndata = [randn(T, dim) for i in 1:nSamples]\ny = f.(data)\nvslsq = VSLeastSquares(PolynomialBasis(deg, dim, Hermite), VoidTransformation(), T)\nfit(vslsq, data, y)\nx = randn(T, dim)\npredict(vslsq, x)","category":"page"},{"location":"#VectorSpaceLeastSquares","page":"Home","title":"VectorSpaceLeastSquares","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aims at computing the least squares approximation within a vector space of functions. It solves the following optimization problem","category":"page"},{"location":"","page":"Home","title":"Home","text":"inf_alpha in mathbbR^d sum_m=1^M left(sum_i=1^d alpha_i g_icircvarphi(x_m) - y_mright)^2","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sequence (x_m y_m)_1 le m le M is the training data: y_m in mathbbR is the expected value at point x_m in mathbbR^d.\nThe function varphi mathbbR^d to mathbbR^d is the transformation to be be applied to the input data before solving the least squares problem\nFor i = 1 dots d, g_i  mathbbR^d to mathbbR. The family (g_1 dots g_d) must be a free family to ensure the least squares problem is not ill-posed. We call the family a basis in the following.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let mathcalV be the vector space generated by the functions (g_1 dots g_d), this package computes the best least squares approximation of the unknown function x longmapsto y inside mathcalV up to a transformation varphi.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VectorSpaceLeastSquares is compatible with Julia version 1.11 or later.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To get the VectorSpaceLeastSquares package installed, execute the following Julia command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"VectorSpaceLeastSquares\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n  \"index.md\",\n  \"basis.md\",\n  \"transformations.md\",\n  \"leastsquares.md\",\n  \"examples.md\"\n]","category":"page"},{"location":"transformations/#Transformations","page":"Transformations","title":"Transformations","text":"","category":"section"},{"location":"transformations/#VectorSpaceLeastSquares.AbstractTransformation","page":"Transformations","title":"VectorSpaceLeastSquares.AbstractTransformation","text":"AbstractTransformation\n\nSuper type for all transformations. \n\nA transformation is a function varphi mathbbR^d to mathbbR^d, which is applied on the fly to the data before proceeding with the least squares problem. A transformation must implement apply! and jacobian.\n\nTo define a new transformation, define a new concrete subtype of AbstractTransformation and implement the corresponding apply! and jacobian methods. For instance the scaled log-transformation varphi(x) = alpha log(x) where alpha in mathbbR is defined as follows\n\nstruct LogTransformation <: AbstractTransformation\n    scale::Vector{<:Real}\nend\n\nfunction apply!(t::LogTransformation, tx::AbstractVector{<:Real}, x::AbstractVector{<:Real})\n    tx .= t.scale .* log.(x)\nend\n\nfunction jacobian(t::LogTransformation, x::AbstractVector{<:Real}, i::Integer, j::Integer)\n    if i != j\n        return 0.\n    end\n    t.scale[i] / x[i]\nend\n\n\n\n\n\n","category":"type"},{"location":"transformations/","page":"Transformations","title":"Transformations","text":"The following methods are available and must be defined for any concrete subtype of AbstractTransformation","category":"page"},{"location":"transformations/#VectorSpaceLeastSquares.apply!","page":"Transformations","title":"VectorSpaceLeastSquares.apply!","text":"apply!(t::AbstractTransformation, tx::AbstractVector{<:Real}, x::AbstractVector{<:Real})\n\nApply the transformation t to x and store the result in tx.\n\n\n\n\n\n","category":"function"},{"location":"transformations/#VectorSpaceLeastSquares.jacobian","page":"Transformations","title":"VectorSpaceLeastSquares.jacobian","text":"jacobian(t::AbstractTransformation, x::AbstractVector{<:Real}, i::Integer, j::Integer)\n\nCompute partial_x_j varphi_i(x).\n\n\n\n\n\n","category":"function"},{"location":"transformations/#Void-transformation","page":"Transformations","title":"Void transformation","text":"","category":"section"},{"location":"transformations/","page":"Transformations","title":"Transformations","text":"It corresponds to varphi(x) = x for x in mathbbR^d.","category":"page"},{"location":"transformations/#VectorSpaceLeastSquares.VoidTransformation","page":"Transformations","title":"VectorSpaceLeastSquares.VoidTransformation","text":"VoidTransformation <: AbstractTransformation\n\nThis transformation does nothing.\n\n\n\n\n\n","category":"type"},{"location":"transformations/#Linear-transformation","page":"Transformations","title":"Linear transformation","text":"","category":"section"},{"location":"transformations/","page":"Transformations","title":"Transformations","text":"It corresponds to varphi mathbbR^d to mathbbR^d such that varphi(x) = (x - alpha) * sigma for where alpha sigma in mathbbR^d and * denotes a term by term multiplication. In the following, alpha is called the center and sigma is called the scale","category":"page"},{"location":"transformations/#VectorSpaceLeastSquares.LinearTransformation","page":"Transformations","title":"VectorSpaceLeastSquares.LinearTransformation","text":"LinearTransformation{Td} <: AbstractTransformation where Td<:Real\n\nImplement a linear transformation of the data defined by varphi(x) = (x - alpha) * sigma \n\n\n\n\n\n","category":"type"},{"location":"transformations/#VectorSpaceLeastSquares.getCenter","page":"Transformations","title":"VectorSpaceLeastSquares.getCenter","text":"getCenter(t::LinearTransformation{<:Real})\n\nReturn the center α of the linear transformation\n\n\n\n\n\n","category":"function"},{"location":"transformations/#VectorSpaceLeastSquares.getScale","page":"Transformations","title":"VectorSpaceLeastSquares.getScale","text":"getScale(t::LinearTransformation{<:Real}) = t.scale\n\nReturn the scale σ of the linear transformation\n\n\n\n\n\n","category":"function"},{"location":"transformations/#VectorSpaceLeastSquares.LinearTransformation-Union{Tuple{AbstractVector{<:AbstractVector{T}}}, Tuple{T}} where T<:Real","page":"Transformations","title":"VectorSpaceLeastSquares.LinearTransformation","text":"LinearTransformation(x::AbstractVector{<:AbstractVector{T}}) where T<:Real\n\nCreate a linear transformation by setting α as the empirical mean and σ as the inverse of the empirical standard deviation. Each entry of x is supposed to be one sample of the data.\n\n\n\n\n\n","category":"method"}]
}
